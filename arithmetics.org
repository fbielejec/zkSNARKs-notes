#+STARTUP: overview
#+latex_class_options: [14pt]

* Contents
:PROPERTIES:
:VISIBILITY:  all
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#fundamental-theorem-of-arithmetics][Fundamental Theorem of Arithmetics]]
  - [[#example][Example]]
- [[#coprime-integers][Coprime integers]]
- [[#euclidean-algorithm][Euclidean Algorithm]]
- [[#modular-arithmetic][Modular arithmetic]]
  - [[#congruence-modular-arithmetic][Congruence (modular arithmetic)]]
  - [[#example-clock-example-8-moonmath][Example: clock (example 8 MoonMath)]]
  - [[#chinese-remainder-theorem][Chinese Remainder Theorem]]
  - [[#example-crt][Example: CRT]]
  - [[#remainder-class-representation][Remainder Class Representation]]
  - [[#example-11-moonmath-arithmetic-modulo-6][Example 11 MoonMath (Arithmetic modulo $6$)]]
  - [[#modular-multiplicative-inverses][Modular multiplicative inverses]]
    - [[#example-modular-inverse][Example: modular inverse]]
- [[#additional][Additional]]
  - [[#chain-rule-differentiation][Chain rule differentiation]]
:END:

* DONE Fundamental Theorem of Arithmetic
The *Fundamental Theorem of Arithmetic* states that every integer greater than 1 can be uniquely expressed as a product of prime numbers, up to the order of the factors.

=Definition=

Any integer $n$ can be written in the form:


$n = p_1^{e_1} \cdot p_2^{e_2} \cdots p_k^{e_k}$

where:

- $p_1, p_2, \ldots, p_k$ are distinct prime numbers,
- $e_1, e_2, \ldots, e_k$ are positive integers that represent the multiplicities of the primes.

** Example
Consider the number 30:

$30 = 2^1 \cdot 3^1 \cdot 5^1$

In this case, the prime factorization involves the primes 2, 3, and 5.

Consider the number 1200

$1200=2^{4} \cdot 3^{1} \cdot 5^{2} = (2\cdot 2\cdot 2\cdot 2) \cdot 3 \cdot (5\cdot 5) = 5\cdot 2\cdot 5\cdot 2\cdot 3\cdot 2\cdot 2=\ldots$

The theorem says two things about this example:
- 1200 can be represented as a product of primes 2,3 and 5.
- no matter how this is done, there will always be exactly four 2s, one 3, two 5s and *no other primes in the product*.

* Coprime integers
Coprime integers are pairs of integers that do not have any common factor other than 1.
* TODO Euclidean Algorithm
* IN-PROGRESS Modular arithmetic
** DONE Congruence (modular arithmetic)
Given an integer $m \geq 1$, called a modulus, two integers $a$ and $b$ are said to be *congruent modulo $m$*, if $m$ is $a$ divisor of their difference; that is, if there is an integer $k$ such that:

$a - b = k \times m$

Congruence modulo $m$ is denoted:

$a \equiv b \quad \text{(mod m)}$

which is the same as writing:

$a \hspace{.5em} \text{mod m} \equiv b \hspace{.5em} \text{mod m }$

It is an equivalence relation that is compatible with the operations of addition, subtraction, and multiplication

** DONE Example: clock (example 8 MoonMath)

#+BEGIN_SRC sage :session . :exports both

# starting at 5 and adding 12 we are at 5 again (as on the clock face)
(5 + 12) % 12

# when we subtract 12 hours, we are at 5 o’clock again, representing the number −7
(5 - 12) % 12

# all these integers are congruent modulo 12 (euclidean division remainder is the same)
[n % 12 for n in [-7,5,17,29] ]

#+END_SRC

#+RESULTS:
: [5, 5, 5, 5]
: 5
: 5
** DONE Chinese Remainder Theorem
*Chinese Remainder Theorem* states that if one knows the remainders of the Euclidean division of an integer $x$ by several integers, then one can determine uniquely the remainder of the division of $x$ by the product of these integers, under the condition that the divisors are pairwise [[Coprime integers][coprime]] (no two divisors share a common factor other than 1).

Suppose we have a system of simultaneous congruences:

$x \equiv a_1 \pmod{m_1}$
$x \equiv a_2 \pmod{m_2}$
...
$x \equiv a_k \pmod{m_k}$

where:

- $a_1,...,a_k$ are integers.
- $m_1,...,m_k$ are pairwise coprime integers, i.e. $\forall i\neq j \hspace{.5em} gcd(m_i,m_j)=1$.

The Chinese Remainder Theorem states that there exists a unique solution:

x modulo $M=m_1 m_2 \cdot \cdot \cdot m_k$.

In other words there is an integer $x$ such that:

$x \equiv a_i \pmod{m_i} \forall i=1,2,\ldots,k$

and any other solutions $x'$ is congruent to x modulo $M$ ($x' \equiv x \pmod{M}$).

** DONE Example: CRT
$x \equiv 2 \pmod{3}$
$x \equiv 3 \pmod{5}$
$x \equiv 2 \pmod{7}$

1. Compute the product $M=m_1m_2,\ldots,m_k$

$M=3\cdot5\cdot7=105$

2. Compute partial products $\forall i=1,\ldots,k \hspace{.5em} M_i=\frac{M}{m_i}$

$M_1=(3\cdot5\cdot7)/3=35$
$M_2=(3\cdot5\cdot7)/5=21$
$M_3=(3\cdot5\cdot7)/7=15$

1. Find modular inverses $y_i$: $\forall i \hspace{.5em} M_i y_i \equiv 1 \pmod{m_i}$. We know these inverses exist because $gcd(M_i,m_i)=1$

$35 y_1 =1 \pmod{3} \leftrightarrow y_1=2$
$21 y_2 =1 \pmod{5} \leftrightarrow y_2=1$
$15 y_3 =1 \pmod{7} \leftrightarrow y_3=1$

4. Combine the Results. The solution $x$ can be constructed as: $x=\sum_{i=1}^{k}a_iM_iy_i \pmod{M}$ (ensures that $x$ satisfies all the congruences):

$x = (2 \cdot 35 \cdot 2) + (3 \cdot 32 \cdot 1) + (2 \cdot 15 \cdot 1) \pmod{105}$
$x = 233 \pmod{105} = 23$

The solution set consists of all the integers that have the remainder 23 under euclidean divison mod 105 (are congruent mod 105).

#+BEGIN_SRC sage :session . :exports both
x=CRT_list([2,3,2], [3,5,7])
x

# example range
[x + (i * (3*5*7)) for i in range(-2, 3) ]
#+END_SRC

#+RESULTS:
: 23
: [-187, -82, 23, 128, 233]

** DONE Remainder Class Representation
The *remainder class* (or *residue class*) modulo $m$ is the set of all integers that share the same remainder when divided by $m$.

---

*NOTE*

The notation $\mathbb{Z}/m\mathbb{Z}$ (read as *"Z mod mZ"*) represents the *ring of integers modulo m*, where:
- $\mathbb{Z}$ Set of all integers.
- $m\mathbb{Z}$ Set of all integer multiples of m (e.g. for $m=6$ this is $\{\dots, -12, -6, 0, 6, 12, \dots\}$).
- $\mathbb{Z}/m\mathbb{Z}$ Quotient ring formed by "wrapping $\mathbb{Z}$ around a circle with m positions," collapsing all integers into *m residue classes* based on their remainder when divided by m.

---

=Definition=

Given an integer $r$ and modulus $m$, the residue class $[r]_m$ is:

$[r]_m = \{ x \in \mathbb{Z} \mid x \equiv r \pmod{m} \}$

- All integers in $[r]_m$ differ by multiples of $m$.
- There are exactly $m$ distinct residue classes modulo $m$, denoted as $[0]_m, [1]_m, \dots, [m-1]_m$.
- Each residue class $[r]_m$ is countably infinite (has infinite cardinality).
- The set of residue classes $\mathbb{Z} / m \mathbb{Z}$  forms a *ring* under addition and multiplication.
- If $m$ is prime, $\mathbb{Z} / m \mathbb{Z}$ is a *field*.

** DONE Example 11 MoonMath (Arithmetic modulo $6$)

Choosing $n=6$ we have six remainder classes of integers that are congruent mod 6 (they have the same remainder when divided mod 6). Let's list them:

#+BEGIN_SRC sage :session . :exports both
m = 6
# init map to store classes
remainder_classes = {r: [] for r in range(m)}

# example range
for x in range(-6, 18):
    remainder_classes[x % m].append(x)

remainder_classes
#+END_SRC

#+RESULTS:
: {0: [-6, 0, 6, 12],
:  1: [-5, 1, 7, 13],
:  2: [-4, 2, 8, 14],
:  3: [-3, 3, 9, 15],
:  4: [-2, 4, 10, 16],
:  5: [-1, 5, 11, 17]}

Remainder classes simplify modular artihmetic, for example to compute $2+5 \hspace{.5em} \text{mod 6}$:

1) Choose arbitrary element from each class e.g $14$ (for $2$) and $-1$ (for $5$).
2) Add those numbers (in the usual way): $14 + (-1) = 13$.
3) $13$ is in the remainder class $r_1$, hence $2+5 \hspace{.5em} \text{mod 6} = 1$:

#+BEGIN_SRC sage :session . :exports both
# ring Z/6Z
Z6=Integers(6)
Z6
Z6(2)+Z6(5)
#+END_SRC

#+RESULTS:
: Ring of integers modulo 6
: 1

Applying the same reasoning to all the remainder classes, addition and multiplication can be transferred to the representatives of the remainder classes:

#+BEGIN_SRC sage :session . :exports both
# ring Z/6Z
Z6 = Integers(6)
add_table = [[Z6(i) + Z6(j) for j in range(6)] for i in range(6)]
mul_table = [[Z6(i) * Z6(j) for j in range(6)] for i in range(6)]

# Print the tables
print("Addition Table in Z6:")
print("+ | " + " ".join(f"{i:2}" for i in range(6)))
print("-" * 20)
for i in range(6):
    print(f"{i} | " + " ".join(f" {add_table[i][j]}" for j in range(6)))

print("\nMultiplication Table in Z6:")
print(". | " + " ".join(f"{i:2}" for i in range(6)))
print("-" * 20)
for i in range(6):
    print(f"{i} | " + " ".join(f" {mul_table[i][j]}" for j in range(6)))
#+END_SRC

#+RESULTS:
#+begin_example
Addition Table in Z6:
+ |  0  1  2  3  4  5
--------------------
0 |  0  1  2  3  4  5
1 |  1  2  3  4  5  0
2 |  2  3  4  5  0  1
3 |  3  4  5  0  1  2
4 |  4  5  0  1  2  3
5 |  5  0  1  2  3  4

Multiplication Table in Z6:
. |  0  1  2  3  4  5
--------------------
0 |  0  0  0  0  0  0
1 |  0  1  2  3  4  5
2 |  0  2  4  0  2  4
3 |  0  3  0  3  0  3
4 |  0  4  2  0  4  2
5 |  0  5  4  3  2  1
#+end_example
** Modular multiplicative inverses
A *modular multiplicative inverse* of an integer $a$ is an integer $x$ such that the product $ax$ is congruent to $1$ with respect to the modulus $m$:

$ax \equiv 1 \pmod{m}$

---
*NOTE*

$ax \equiv 1 \pmod{m} \iff gcd(a,m)=1$

A modular multiplicative inverse of a modulo $m$ can be found by using the [[Euclidean Algorithm][Extended Euclidean Algorithm]].

---

*** Example: modular inverse
Let $m = 5$ and $a = 2$.
$gcd(2,5) = 1$ so there exists a multiplicative inverse.
Since $2 * 3 \equiv 1 \pmod{5}$ the multiplicative inverse of 2 modulo 5 is 3.

* Additional
** Chain rule differentiation
In order to differentiate a function of a function, $y = f(g(x))$, that is to find \frac{dy}{dx}
we need to:

- Substitute $u=g(x)$. This gives us:

$y=f(u)$

- Use the chain rule:

$\frac{dy}{dx} = \frac{dy}{du} \cdot \frac{du}{dx}$


=Example=

$y=cos(x^2)$

Let $u=x^2$ Then $y=cos(u)$. Therefore:

$\frac{dy}{dx}=\frac{d}{du}(cos(u)) \cdot \frac{d}{dx}(x^2)$


$\frac{dy}{dx}=-sin(y) \cdot 2x$
