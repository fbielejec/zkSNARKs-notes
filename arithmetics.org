#+STARTUP: overview
#+latex_class_options: [14pt]

* Contents
:PROPERTIES:
:VISIBILITY:  all
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#set-theory][Set Theory]]
  - [[#bijection][Bijection]]
- [[#prime-numbers][Prime numbers]]
  - [[#trial-division][Trial division]]
  - [[#primality-test][Primality test]]
  - [[#integer-factorization][Integer factorization]]
    - [[#integer-factorization-in-rust][Integer factorization in Rust]]
- [[#fundamental-theorem-of-arithmetic][Fundamental Theorem of Arithmetic]]
  - [[#example][Example]]
  - [[#example-2-public-key-cryptography][Example 2: Public Key Cryptography]]
- [[#greatest-common-divisor-gcd][Greatest Common Divisor (GCD)]]
- [[#least-common-multiple-lcm][Least Common Multiple (LCM)]]
- [[#coprime-integers][Coprime integers]]
- [[#cofactors][Cofactors]]
- [[#euclidean-algorithm][Euclidean Algorithm]]
- [[#extended-euclidean-algorithm][Extended Euclidean Algorithm]]
- [[#modular-arithmetic][Modular arithmetic]]
  - [[#congruence-modular-arithmetic][Congruence (modular arithmetic)]]
  - [[#example-clock-example-8-moonmath][Example: clock (example 8 MoonMath)]]
  - [[#chinese-remainder-theorem][Chinese Remainder Theorem]]
    - [[#example-crt][Example: CRT]]
  - [[#remainder-classes][Remainder Classes]]
    - [[#example-11-moonmath-arithmetic-modulo-6][Example 11 MoonMath (Arithmetic modulo $6$)]]
  - [[#modular-multiplicative-inverses][Modular multiplicative inverses]]
    - [[#example-modular-inverse][Example: modular inverse]]
- [[#additional][Additional]]
  - [[#chain-rule-differentiation][Chain rule differentiation]]
:END:

* IN-PROGRESS Set Theory
** Bijection
:PROPERTIES:
:ID:       702af2c7-7c8c-431c-852b-6dc74dc3ad94
:END:

=Definition=

A bijection (or bijective function), is a function between two sets such that each element of the second set (the codomain) is the image of exactly one element of the first set (the domain).
In other words it is a one-to-one correspondence.

A function is bijective if it is *invertible*; that is, a function $f: X \rightarrow Y$ is bijective if there exists a function $g: Y \rightarrow X$ s.t.

$\forall x \in X \hspace g(f(x))=x$ and
$\forall y \in Y \hspace f(g(y))=y$

* IN-PROGRESS Prime numbers
:PROPERTIES:
:ID:       169e79b1-7a9d-41a9-bd03-5536cead4f5b
:END:
** Trial division
:PROPERTIES:
:ID:       15d47020-a0dd-492e-81fd-4522db26c9eb
:END:
See [[id:18588d33-4340-4099-84c5-4453f5a021e3][Primality test]]
** IN-PROGRESS Primality test
:PROPERTIES:
:ID:       18588d33-4340-4099-84c5-4453f5a021e3
:END:

Simplest primality test is [[id:15d47020-a0dd-492e-81fd-4522db26c9eb][Trial division]]:
- Given an input number $n$ check whether it is divisible by any prime number between $2$ and $\sqrt{n}$ (i.e. whether the division leaves no remainder).
- if so, then $n$ is composite, else it is [[id:169e79b1-7a9d-41a9-bd03-5536cead4f5b][prime]].
- for any divisor $p \geq \sqrt{n}$ there must be another divisor $n/p \leq \sqrt{n}$, therefore looking for prime divisors at most $\sqrt{n}$ is sufficient.

=Example=

Let n = 100. It's divisors are:
1, 2, 4, 5, 10, 20, 25, 50, 100

When all possible divisors up to n are testes, some will be discovered twice:

$1 \times 100$, $2 \times 50$, $4 \times 25$, $5 \times 20$, $\mathbf{10 \times 10}$, $20 \times 5$, $24 \times 4$, $50 \times 2$, $100 \times 1$

products past $10 \times 10$ are the reverse of products that appear earlier, so the algorithm need only search for divisors less than or equal to $\sqrt{n}$.

** IN-PROGRESS Integer factorization
:PROPERTIES:
:ID:       2e449eb2-5045-46ca-aa94-d850f1cfa906
:END:

Integer factorization is the decomposition of a positive integer into a product of integers.
Every positive integer greater than 1 is either the product of two or more integer factors greater than 1, in which case it is a composite number, or it is not, in which case it is a [[id:169e79b1-7a9d-41a9-bd03-5536cead4f5b][Prime number]].

Simplest method to factorize a small integer is a [[id:18588d33-4340-4099-84c5-4453f5a021e3][trial division]]:
- checking if the number is divisible by prime numbers $2, 3, 5, \ldots \sqrt{n}$.
- each time a factor is found checking whether it is prime.

---

*NOTE*

When the numbers are sufficiently large, no efficient non-quantum integer factorization algorithm is known.

---

#+BEGIN_SRC
algorithm trial-division is
    input: Integer n to be factored
    output: List F of prime factors of n

    P <- set of all primes n <= sqrt(n)
    F <- empty list of factors

    for each prime p in P do
        while n mod p is 0
            Add factor p to list F
            n <- n/p

    if F is empty  (Original n is prime?)
        Add factor n to list F
#+END_SRC
*** Integer factorization in Rust
#+BEGIN_SRC rustic
fn factorize(n: i32) -> Vec<i32> {
    let sqrt_n = (n as f32).sqrt() as i32;

    let mut factors = vec![];
    // we only need to test up to sqrt(n)
    for factor in 2..=sqrt_n {
        // found an integer factor
        if n % factor == 0 {
            // since a = fac1 * fac2 we can record two factors
            factors.push(factor);
            factors.push(n / factor);
        }
    }
   factors
}

let n = 16;
println!("factors of {n}: {:?}", factorize(n))
#+END_SRC

#+RESULTS:
: factors of 16: [2, 8, 4, 4]

* DONE Fundamental Theorem of Arithmetic
:PROPERTIES:
:ID:       6402bede-282d-4b6a-a4f9-31092fc00739
:END:

The *Fundamental Theorem of Arithmetic* states that every integer greater than 1 can be uniquely expressed as a product of prime numbers, up to the order of the factors.

=Theorem=

Any integer $n$ can be written in the form:


$n = p_1^{e_1} \cdot p_2^{e_2} \cdots p_k^{e_k}$

where:

- $p_1, p_2, \ldots, p_k$ are distinct prime numbers,
- $e_1, e_2, \ldots, e_k$ are positive integers that represent the multiplicities of the primes.

---

*NOTE*

This theorem is one of the main reasons why 1 is not considered a prime number: if 1 were prime, then factorization into primes would not be unique, for example:

$2 = 2 \cdot 1 = 2 \cdot 1 \cdot 1 = \ldots$

---

** Example
Consider the number 30:

$30 = 2^1 \cdot 3^1 \cdot 5^1$

In this case, the prime factorization involves the primes 2, 3, and 5.

Consider the number 1200

$1200=2^{4} \cdot 3^{1} \cdot 5^{2} = (2\cdot 2\cdot 2\cdot 2) \cdot 3 \cdot (5\cdot 5) = 5\cdot 2\cdot 5\cdot 2\cdot 3\cdot 2\cdot 2=\ldots$

The theorem says two things about this example:
- 1200 can be represented as a product of primes 2,3 and 5.
- no matter how this is done, there will always be exactly four 2s, one 3, two 5s and *no other primes in the product*.
** TODO Example 2: Public Key Cryptography
- https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange

#+BEGIN_SRC sage :session . :exports both

#+END_SRC

* DONE Greatest Common Divisor (GCD)
:PROPERTIES:
:ID:       0877b2d8-5757-46d5-b2db-f95628b0ccea
:END:
See [[id:43e6617a-26c8-4c42-be27-4836ebc46a30][Euclidean Algorithm]]
* IN-PROGRESS Least Common Multiple (LCM)
:PROPERTIES:
:ID:       04ef82e7-e828-4fb4-a64d-ae8f62d0b902
:END:

The least common multiple of two numbers is the smallest number that is a multiple of both of them.

=Example=

LCM of 8 and 10:

- Multiples of 8:
  | 8 | 16 | 24 | 32 | *40* | 48 | 56 | 64 | 72 | *80* |
- Multiples of 10:
  | 10 | 20 | 30 | *40* | 50 | 60 | 70 | *80* | 90 |

LCM of 8 and 10 is 80

=Computing LCM=

LCM of $n$ and $m$ can be found using the formula:

$\frac{n \time m}{GCD(n,m)}$

where:
 - GCD is the [[id:0877b2d8-5757-46d5-b2db-f95628b0ccea][Greatest Common Divisor (GCD)]] of $n$ and $m$.

* Coprime integers
:PROPERTIES:
:ID:       91547919-6be2-47a2-b684-672779b56bc5
:END:
Coprime integers are pairs of integers that do not have any common factor other than 1 (their [[id:0877b2d8-5757-46d5-b2db-f95628b0ccea][Greatest Common Divisor (GCD)]] is 1)
* TODO Cofactors
:PROPERTIES:
:ID:       5cf1c4ca-35a9-425c-8fe9-ccdbd78d7d4d
:END:
* DONE Euclidean Algorithm
:PROPERTIES:
:ID:       43e6617a-26c8-4c42-be27-4836ebc46a30
:END:
What is the GCD of 39 and 27?

|  A |   B | Remainder                             |
|----+-----+---------------------------------------|
| 39 |  27 | 12 = 39 - floor(39/27) * 27 (39 % 27) |
| 27 |  12 | 3 = 27 - floor(27/12) * 12 (27 % 12)  |
| 12 | *3* | 0 = 12 - floor(12/3) * 12  (12 % 3)   |

---

*NOTES*

- algorithm will work even if we switch A and B
  - 27 % 37 = 27 so we just have one more step to do in this case
- In every step we move everythign the left (throwing away A)
- stop condition is the Remainder being 0
  - result is then stored in B
- algorithm runs in $\mathcal{O}(log(A+B))$

---

#+BEGIN_SRC rustic
pub fn gcd(a: i32, b: i32) -> i32 {
    if b == 0 {
        return a;
    }
    gcd(b, a % b)
}

println!("{}", gcd(39, 27));
#+END_SRC

#+RESULTS:
: 3

* TODO Extended Euclidean Algorithm
:PROPERTIES:
:ID:       9f4c15da-f06b-4c87-8ebc-acb9d25f9fe0
:END:
* IN-PROGRESS Modular arithmetic
** DONE Congruence (modular arithmetic)
:PROPERTIES:
:ID:       6f034760-16d2-491c-bfce-b9626d770d33
:END:
Given an integer $m \geq 1$, called a modulus, two integers $a$ and $b$ are said to be *congruent modulo $m$*, if $m$ is the divisor of their difference; that is, if there is an integer $k$ such that:

$a - b = k \times m$

Congruence modulo $m$ is denoted:

$a \equiv b \quad \text{(mod m)}$

which is the same as writing:

$a \hspace{.5em} \text{mod m} \equiv b \hspace{.5em} \text{mod m }$

It is an equivalence relation that is compatible with the operations of addition, subtraction, and multiplication

** DONE Example: clock (example 8 MoonMath)

#+BEGIN_SRC sage :session . :exports both

# starting at 5 and adding 12 we are at 5 again (as on the clock face)
(5 + 12) % 12

# when we subtract 12 hours, we are at 5 o’clock again, representing the number −7
(5 - 12) % 12

# all these integers are congruent modulo 12 (euclidean division remainder is the same)
[n % 12 for n in [-7,5,17,29] ]
#+END_SRC

#+RESULTS:
: [5, 5, 5, 5]
: 5
: 5
** DONE Chinese Remainder Theorem
:PROPERTIES:
:ID:       454687bb-fa64-44d6-8f94-109611459f29
:END:
*Chinese Remainder Theorem* states that if one knows the remainders of the Euclidean division of an integer $x$ by several integers, then one can determine uniquely the remainder of the division of $x$ by the product of these integers, under the condition that the divisors are pairwise [[id:91547919-6be2-47a2-b684-672779b56bc5][Coprime]] (no two divisors share a common factor other than 1).

Suppose we have a system of simultaneous congruences:

$x \equiv a_1 \pmod{m_1}$
$x \equiv a_2 \pmod{m_2}$
...
$x \equiv a_k \pmod{m_k}$

where:

- $a_1,...,a_k$ are integers.
- $m_1,...,m_k$ are pairwise coprime integers, i.e. $\forall i\neq j \hspace{.5em} gcd(m_i,m_j)=1$.

The Chinese Remainder Theorem states that there exists a unique solution:

x modulo $M=m_1 m_2 \cdot \cdot \cdot m_k$.

In other words there is an integer $x$ such that:

$x \equiv a_i \pmod{m_i} \forall i=1,2,\ldots,k$

and any other solutions $x'$ is congruent to x modulo $M$ ($x' \equiv x \pmod{M}$).

*** DONE Example: CRT
$x \equiv 2 \pmod{3}$
$x \equiv 3 \pmod{5}$
$x \equiv 2 \pmod{7}$

1. Compute the product $M=m_1m_2,\ldots,m_k$

$M=3\cdot5\cdot7=105$

2. Compute partial products $\forall i=1,\ldots,k \hspace{.5em} M_i=\frac{M}{m_i}$

$M_1=(3\cdot5\cdot7)/3=35$
$M_2=(3\cdot5\cdot7)/5=21$
$M_3=(3\cdot5\cdot7)/7=15$

1. Find modular inverses $y_i$: $\forall i \hspace{.5em} M_i y_i \equiv 1 \pmod{m_i}$. We know these inverses exist because $gcd(M_i,m_i)=1$

$35 y_1 =1 \pmod{3} \leftrightarrow y_1=2$
$21 y_2 =1 \pmod{5} \leftrightarrow y_2=1$
$15 y_3 =1 \pmod{7} \leftrightarrow y_3=1$

4. Combine the Results. The solution $x$ can be constructed as: $x=\sum_{i=1}^{k}a_iM_iy_i \pmod{M}$ (ensures that $x$ satisfies all the congruences):

$x = (2 \cdot 35 \cdot 2) + (3 \cdot 32 \cdot 1) + (2 \cdot 15 \cdot 1) \pmod{105}$
$x = 233 \pmod{105} = 23$

The solution set consists of all the integers that have the remainder 23 under euclidean divison mod 105 (are congruent mod 105).

#+BEGIN_SRC sage :session . :exports both
x=CRT_list([2,3,2], [3,5,7])
x

# example range
[x + (i * (3*5*7)) for i in range(-2, 3) ]
#+END_SRC

#+RESULTS:
: 23
: [-187, -82, 23, 128, 233]

** DONE Remainder Classes
:PROPERTIES:
:ID:       770696d2-1294-4e86-ac3c-6803f9053537
:END:
The *remainder class* (or *residue class*) modulo $m$ is the set of all integers that share the same remainder when divided by $m$.

---

*NOTE*

The notation $\mathbb{Z}/m\mathbb{Z}$ (read as *"Z mod mZ"*) represents the *ring of integers modulo m*, where:
- $\mathbb{Z}$ Set of all integers.
- $m\mathbb{Z}$ Set of all integer multiples of m (e.g. for $m=6$ this is $\{\dots, -12, -6, 0, 6, 12, \dots\}$).
- $\mathbb{Z}/m\mathbb{Z}$ Quotient ring formed by "wrapping $\mathbb{Z}$ around a circle with m positions," collapsing all integers into *m residue classes* based on their remainder when divided by m.

$(\mathbb{Z}_6, +)$ and $\mathbb{Z}/m\mathbb{Z}$ are *the same algebraic object*:
- $(\mathbb{Z}_6, +)$ emphasizes the /additive group/ structure.
  - Elements are equivalence classes \([0], [1], \dots, [5]\).
  - The operation is *addition modulo 6*.
- $\mathbb{Z}/6\mathbb{Z}$ stresses the /quotient ring/ construction (integers modulo the ideal $6\mathbb{Z}$.
  - Still forms an additive group under the same operation.

---

=Definition=

Given an integer $r$ and modulus $m$, the residue class $[r]_m$ is:

$[r]_m = \{ x \in \mathbb{Z} \mid x \equiv r \pmod{m} \}$

- All integers in $[r]_m$ differ by multiples of $m$.
- There are exactly $m$ distinct residue classes modulo $m$, denoted as $[0]_m, [1]_m, \dots, [m-1]_m$.
- Each residue class $[r]_m$ is countably infinite (has infinite cardinality).
- The set of residue classes $\mathbb{Z} / m \mathbb{Z}$  forms a *ring* under addition and multiplication.
- If $m$ is prime, $\mathbb{Z} / m \mathbb{Z}$ is a *field*.

*** DONE Example 11 MoonMath (Arithmetic modulo $6$)

Choosing $n=6$ we have six remainder classes of integers that are congruent mod 6 (they have the same remainder when divided mod 6). Let's list them:

#+BEGIN_SRC sage :session . :exports both
m = 6
# init map to store classes
remainder_classes = {r: [] for r in range(m)}

# example range, it's infinite in reality
for x in range(-6, 18):
    remainder_classes[x % m].append(x)

remainder_classes
#+END_SRC

#+RESULTS:
: {0: [-6, 0, 6, 12],
:  1: [-5, 1, 7, 13],
:  2: [-4, 2, 8, 14],
:  3: [-3, 3, 9, 15],
:  4: [-2, 4, 10, 16],
:  5: [-1, 5, 11, 17]}

Remainder classes simplify modular arithmetic, for example to compute $2+5 \hspace{.5em} \text{mod 6}$:

1) Choose arbitrary element from each class e.g $14$ (for $2$) and $-1$ (for $5$).
2) Add those numbers (in the usual way): $14 + (-1) = 13$.
3) $13$ is in the remainder class $r_1$, hence $2+5 \hspace{.5em} \text{mod 6} = 1$:

#+BEGIN_SRC sage :session . :exports both
# ring Z/6Z
Z6=Integers(6)
Z6
Z6(2)+Z6(5)
#+END_SRC

#+RESULTS:
: Ring of integers modulo 6
: 1

Applying the same reasoning to all the remainder classes, addition and multiplication can be transferred to the representatives of the remainder classes:

#+BEGIN_SRC sage :session . :exports both
# ring Z/6Z
Z6 = Integers(6)
add_table = [[Z6(i) + Z6(j) for j in range(6)] for i in range(6)]
mul_table = [[Z6(i) * Z6(j) for j in range(6)] for i in range(6)]

# Print the tables
print("Addition Table in Z6:")
print("+ | " + " ".join(f"{i:2}" for i in range(6)))
print("-" * 20)
for i in range(6):
    print(f"{i} | " + " ".join(f" {add_table[i][j]}" for j in range(6)))

print("\nMultiplication Table in Z6:")
print(". | " + " ".join(f"{i:2}" for i in range(6)))
print("-" * 20)
for i in range(6):
    print(f"{i} | " + " ".join(f" {mul_table[i][j]}" for j in range(6)))
#+END_SRC

#+RESULTS:
#+begin_example
Addition Table in Z6:
+ |  0  1  2  3  4  5
--------------------
0 |  0  1  2  3  4  5
1 |  1  2  3  4  5  0
2 |  2  3  4  5  0  1
3 |  3  4  5  0  1  2
4 |  4  5  0  1  2  3
5 |  5  0  1  2  3  4

Multiplication Table in Z6:
. |  0  1  2  3  4  5
--------------------
0 |  0  0  0  0  0  0
1 |  0  1  2  3  4  5
2 |  0  2  4  0  2  4
3 |  0  3  0  3  0  3
4 |  0  4  2  0  4  2
5 |  0  5  4  3  2  1
#+end_example
** Modular multiplicative inverses
A *modular multiplicative inverse* of an integer $a$ is an integer $x$ such that the product $ax$ is congruent to $1$ with respect to the modulus $m$:

$ax \equiv 1 \pmod{m}$

---
*NOTE*

$ax \equiv 1 \pmod{m} \iff gcd(a,m)=1$

A modular multiplicative inverse of a modulo $m$ can be found by using the [[id:9f4c15da-f06b-4c87-8ebc-acb9d25f9fe0][Extended Euclidean Algorithm]].

---

*** Example: modular inverse
Let $m = 5$ and $a = 2$.
$gcd(2,5) = 1$ so there exists a multiplicative inverse.
Since $2 * 3 \equiv 1 \pmod{5}$ the multiplicative inverse of 2 modulo 5 is 3.

* Additional
** Chain rule differentiation
In order to differentiate a function of a function, $y = f(g(x))$, that is to find \frac{dy}{dx}
we need to:

- Substitute $u=g(x)$. This gives us:

$y=f(u)$

- Use the chain rule:

$\frac{dy}{dx} = \frac{dy}{du} \cdot \frac{du}{dx}$


=Example=

$y=cos(x^2)$

Let $u=x^2$ Then $y=cos(u)$. Therefore:

$\frac{dy}{dx}=\frac{d}{du}(cos(u)) \cdot \frac{d}{dx}(x^2)$


$\frac{dy}{dx}=-sin(y) \cdot 2x$
