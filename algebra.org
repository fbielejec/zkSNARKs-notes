#+STARTUP: overview
#+latex_class_options: [12pt]

* Contents
:PROPERTIES:
:VISIBILITY:  all
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#fundamental-theorem-of-algebra][Fundamental Theorem of Algebra]]
  - [[#example-n2][Example $n=2$]]
  - [[#example-n3][Example $n=3$]]
- [[#group][Group]]
  - [[#additive-group][Additive Group]]
  - [[#multiplicative-group][Multiplicative Group]]
  - [[#abelian-group][Abelian Group]]
  - [[#group-order][Group order]]
  - [[#cyclic-group][Cyclic Group]]
  - [[#finite-group][Finite Group]]
  - [[#cofactor-clearing][Cofactor Clearing]]
  - [[#primitive-roots][Primitive Roots]]
- [[#isomorphism][Isomorphism]]
- [[#ring][Ring]]
  - [[#ring-ideal][Ring Ideal]]
- [[#discrete-logarithm][Discrete Logarithm]]
- [[#field][Field]]
  - [[#finite-field][Finite Field]]
- [[#algebraic-closure][Algebraic closure]]
  - [[#example][Example]]
- [[#quadratic-residues-and-square-roots][Quadratic Residues and Square Roots]]
  - [[#example][Example]]
- [[#eulers-criterion][Euler's criterion]]
- [[#roots-of-unity][Roots of Unity]]
  - [[#roots-of-unity][Roots of Unity]]
  - [[#example][Example]]
  - [[#primitive-roots-of-unity][Primitive Roots of Unity]]
  - [[#example][Example]]
- [[#eulers-totient-function][Euler's totient function]]
- [[#fermats-little-theorem][Fermat's Little Theorem]]
  - [[#example][Example]]
- [[#lagranges-theorem][Lagrange's theorem]]
- [[#lagrange-interpolation][Lagrange interpolation]]
- [[#polynomials][Polynomials]]
  - [[#bezouts-identity][Bezout's identity]]
  - [[#polynomial-factorization][Polynomial factorization]]
  - [[#irreducible-polynomial][Irreducible polynomial]]
  - [[#roots-of-the-polynomial][Roots of the polynomial]]
  - [[#schwartz-zippel-lemma][Schwartz-Zippel Lemma]]
    - [[#example][Example]]
    - [[#example-testing-for-polynomial-equality-or-intersection-using-s-z-lemma][Example: Testing for polynomial equality (or intersection) using S-Z Lemma]]
    - [[#example-testing-polynomials-in-finite-fields][Example: Testing polynomials in finite fields]]
    - [[#example-using-the-schwartz-zippel-lemma-to-test-if-two-vectors-are-equal][Example: Using the Schwartz-Zippel Lemma to test if two vectors are equal]]
- [[#homomorphism][Homomorphism]]
  - [[#example-mathbbz-to-mathbbz_6-][Example: (\mathbb{Z},+) to (\mathbb{Z}_{6},+ )]]
  - [[#example-elliptic-curve-scalar-multiplication][Example: Elliptic Curve Scalar Multiplication]]
:END:

* Fundamental Theorem of Algebra
:PROPERTIES:
:ID:       6f36e8fe-0917-4126-9542-28d9e102cc37
:END:
Also called d'Alembert's theorem or the d'Alembert-Gauss theorem.

=Theorem=
Any polynomial of degree $n \geq 1$ with complex coefficients has exactly $n$ roots in the complex number system (counting multiplicities).
This includes polynomials with real coefficients, since every real number is a complex number with its imaginary part equal to zero.

=Implications=
Over the complex numbers, every polynomial can be fully factored into linear terms:

$P(x)=a_{n}(x-r_{1})(x-r_{2}) \cdot ldots \cdot (x-r_{n})$,

where:
- $r_{1}, \ldots, r_{n}$ are complex numbers (some possibly repeated)


** Example $n=2$
Consider the polynomial:
$P(x)=x^2+1$

It has no real roots, but it has two complex roots:
$x=i$ and $x=-i$
** Example $n=3$
Now let's consider a cubic polynomial:

$P(x)=x^3-3x+2$

We know it has exactly 3 roots. We can factor it:

$P(x)=(x-1)^{2} \cdot (x+2)$

The roots (counting multiplicities) are:
- $x=1$ with multiplicity 2.
- $x=-2$ (singel root).

* TODO Group
:PROPERTIES:
:ID:       4c9d3fac-53fc-40a3-9dfd-1014ffb633a2
:END:
** TODO Additive Group
:PROPERTIES:
:ID:       191caddb-b1ac-43c9-91b5-90aff10a58b7
:END:
** TODO Multiplicative Group
:PROPERTIES:
:ID:       29aa6523-2349-4d90-8bb5-8c4f589f7c4a
:END:
** TODO Abelian Group
** DONE Group order
See [[id:97c172ec-93ae-487c-902c-32491b36a6f0][Group Order]]
** DONE Cyclic Group
See [[id:f5f80632-6c31-4065-9470-33d7ea93c025][Cyclic groups]]
** DONE Finite Group
:PROPERTIES:
:ID:       11ce20d5-3d9b-4f61-b520-7a907fbf678a
:END:
See [[id:f5f80632-6c31-4065-9470-33d7ea93c025][Cyclic groups]]
** TODO Cofactor Clearing
:PROPERTIES:
:ID:       717783f4-2954-4d7b-8d44-8fcb8f877834
:END:
- p42 MM
** TODO Primitive Roots
- TODO: Primitive Root (modulo n). Definition, examples
* TODO Isomorphism
:PROPERTIES:
:ID:       4a93116b-94b3-4774-afdd-e7c486dd56fb
:END:
* DONE Ring
see [[id:df288eea-70b8-46b7-b31e-4d2545f25c89][Ring]]
** TODO Ring Ideal
* Discrete Logarithm
:PROPERTIES:
:ID:       d5cb3cab-c38d-430a-bd0d-391eee096c6e
:END:
See [[id:3c27760c-b520-472e-a56e-4e6faf54b5eb][Logarithm map]]
* TODO Field
[[id:129fd124-8c31-4023-b569-752acac1cf1c][Field]]
** TODO Finite Field
[[id:d90a640f-3419-4b13-a272-919d6e03dd57][Finite field (Galois Field)]]
* Algebraic closure

=Definition=

A subset of a given set is *closed* under an operation of the larger set if performing that operation on members of the subset always produces a member of that subset.

** Example
The natural numbers are closed under addition (but ot under subtraction, 1-2 is not a natural number although both 1 and 2 are).

* Quadratic Residues and Square Roots
:PROPERTIES:
:ID:       f6f0e7d8-d44a-4f89-a5e8-1f91bd7fd3e2
:END:

In the context of prime fields, an element that is a square of another element is called a *quadratic residue*.
Element that is not a square of another element is called a *quadratic non-residue*.

=Definition=

Let $p \in P$ be a prime number and $F_p$ it's associated prime field.
Then a number $x \in F_p$ is called a *square root* of another number $y \in F_p$ if $x$ is a solution to the following:

$x^2 = y$

In this case, $y$ is called a *quadratic residue* of $x$.
On the other hand, if $y$ is given and the quadratic equation has no solution $x$, we call $y$ a *quadratic non-residue*.

The [[id:c47a6a82-210a-4f26-b875-27f7ba758aaa][Euler's criterion]] is easily generalized to yield a test for squareness $\text{mod } n$ but in practice the
in practice, it is more efficient to use the [[id:9f4c15da-f06b-4c87-8ebc-acb9d25f9fe0][Extended Euclidean Algorithm]] to calculate the Jacobi symbol.
If n is an odd prime, this is equal to the Legendre symbol, and decides whether y is a quadratic residue modulo n

** TODO Example
#+BEGIN_SRC sage :session . :exports both
q=13
F=GF(q)
#+END_SRC
* TODO Euler's criterion
:PROPERTIES:
:ID:       c47a6a82-210a-4f26-b875-27f7ba758aaa
:END:
https://en.wikipedia.org/wiki/Euler%27s_criterion
* DONE Roots of Unity
:PROPERTIES:
:ID:       4cd6c259-861b-4a9a-9513-3e835576728b
:END:

In the context of finite fields *roots of unity* are elements of the field that when raised to a certain power equal 1.

=General Definition: Roots of Unity=

n-th root of unity in a field $\mathbb{F}$ is an element $w \in \mathbb{F}$ s.t.:

$w^{n}=1$

That is, it is a solution to the equation $x^{n}=1$.

=General Definition: Prmitive Roots of Unity=

A primitive n-th root of unity is a special n-th root of unity such that:

$w^{n}=1 \quad \text{and } w^{k} \neq 1 \text { for any} 0<k<n$

In other words $w$ generates all n-th roots of unity via it's powers.
The set ${1,w,w^2,\ldots,w^{n-1}}$ forms a cyclic group of order $n$.

** Roots of Unity

=Definition=

In a finite field $F_q$, the n-th roots of unity are the solutions to the equation:

$x^n=1$

where :
- $x$ is an element of the field,
- $n$ is a positive integer.

=Key points=

- Since $F_{q}^{*}$ is cyclic, there are exactly $gcd(n,q - 1)$ n-th roots of unity in $F_q$.
- There exist n-th roots of unity in $F_q$ if and only if $n$ divides $q - 1$. This is because the order of any element in the multiplicative group $F_{q}^{*}$ divides the order of the group, which is $q - 1$.

** Example
#+BEGIN_SRC sage :session . :exports both
Z5 = Zmod(5)
Z5
# field has 5 elements
for i in Z5:
  print(i)

# nonzero elements of this field form a multiplicative group of order 4
G5 = Z5.unit_group() # multiplicative group
G5.inject_variables()
G5
for i in G5:
  print(i)

G5.order()

print('---')

# group elements
for i in range(1,5):
    print(Z5(f^i))

print('2-nd roots of unity')
for i in range(1,5):
    elem = Z5(f^i)
    if elem^2 == Z5(1):
      print(elem)

print('4-th roots of unity') # all elements satisfy this property
for i in range(1,5):
    elem = Z5(f^i)
    if elem^4 == Z5(1):
      print(elem)
#+END_SRC

#+RESULTS:
#+begin_example
Ring of integers modulo 5
0
1
2
3
4
Defining f
Multiplicative Abelian group isomorphic to C4
1
f
f^2
f^3
4
---
2
4
3
1
2-nd roots of unity
4
1
4-th roots of unity
2
4
3
1
#+end_example

** Primitive Roots of Unity
=Definition=

An element $\zeta$ in $\mathbb{F}_q$ is called a *primitive $n$-th root of unity* if it satisfies the following conditions:

1. *Unity Condition*:
$\zeta^n = 1$
where $1$ is the multiplicative identity in $\mathbb{F}_q$.

2. *Primitive Condition*:
- The order of $\zeta$ must be exactly $n$, meaning that:

$\zeta^k = 1$ for any positive integer $k < n$ must not hold.

In other words, $\zeta$ should *not equal 1 until raised to the power of $n$.*
This implies that $\zeta$ generates the group of $n$-th roots of unity.

=Properties=
- A primitive $n$-th root of unity generates a cyclic group of order $n$ in the multiplicative group of the finite field.
- The set of all $n$-th roots of unity in $\mathbb{F}_q$ can be expressed as:

$\{ \zeta^k \mid k = 0, 1, \ldots, n-1 \}$

- There are $\varphi(n)$ primitive $n$-th roots of unity in $\mathbb{F}_q$, where $\varphi$ is the [[Euler's totient function][Euler's totient function]], denoting the number of integers up to $n$ that are relatively prime to $n$.
** Example

In the finite field $\mathbb{F}_7$, the primitive $3$-rd roots of unity can be derived as follows:

1. The elements of $\mathbb{F}_7$ are $\{1, 2, 3, 4, 5, 6\}$.
2. Check which elements satisfy $x^3 = 1$ in $\mathbb{F}_7$.
3. Identify the ones that generate roots distinctly without repetition until reaching $n$.

#+BEGIN_SRC sage :session . :exports both
F = FiniteField(7)

# Find primitive 3rd roots of unity in F_7
n = 3
roots = [x for x in F if x^n == 1 and x != 1]

print(f"Primitive {n}-th roots of unity in F_7: {roots}")
#+END_SRC

#+RESULTS:
: Primitive 3-th roots of unity in F_7: [2, 4]
* TODO Euler's totient function
:PROPERTIES:
:ID:       108230aa-cb69-4484-8afa-92af3f6c0818
:END:
* Fermat's Little Theorem
:PROPERTIES:
:ID:       bfc4c13f-a0cf-4772-bdf9-1802b3ba7080
:END:

=Theorem=

For $p \in P$ (prime number) and $k \in Z$ every integer $k$ raised to the power of a prime number $p$ is congruent to itself modulo that prime:

$k^p \equiv k \quad \text{( mod p )}$

If $k$ is coprime to $p$, then we can divide both sides of this congruence by $k$ and get:

$k^{p - 1} \equiv 1  \quad \text{( mod p )}$

=Properties=

Fermat's Little Theorem can be used to find [[id:479ea448-94c4-438e-98dc-2920ffe5fac8][Multiplicative inverses]].

** Example
$k$ = 64 and $p$ = 137 ($k$ is coprime to $p$):

#+BEGIN_SRC sage :session . :exports both
137.is_prime()

ZZ(64)^ZZ(137) % ZZ(137) == ZZ(64) % ZZ(137)

# k is coprime to p

ZZ(64).gcd(137)
# hence
ZZ(64)^ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
#+END_SRC

#+RESULTS:
: True
: True
: 1
: True
* Lagrange's theorem
:PROPERTIES:
:ID:       874070dc-6425-409d-9f1d-c5dc791c0196
:END:
If $H$ is a subgroup of any finite group $G$, then the sub-groups *order* (the number of elements) $|H|$ is a divisor of $|G|$,
i.e. the order (number of elements) of every subgroup $H$ divides the order of group $G$:

$\left[ H \right] \hspace{.5em} \text{divides} \hspace{.5em} \left[ G \right]$

- Equivalent theorem in the context Elliptic Curves is here: [[id:2a523cd8-b0c4-481c-92b4-cddc426df3c2][Lagrange's theorem for Elliptic Curves]].

* TODO Lagrange interpolation
:PROPERTIES:
:ID:       1bd5b2b4-0532-40fa-9bf9-d46112d6de3f
:END:
* IN-PROGRESS Polynomials
** TODO Bezout's identity
:PROPERTIES:
:ID:       d65be3c6-88b2-4c93-9ba5-f1551ba8a8c0
:END:
** Polynomial factorization

=Definition=

Let $P \in R[x]$ be a polynomial.
Then there always exist irreducible polynomials $F_1, F_2, \ldots, F_k \in R[x]$, such that the following holds:

$P = F_1 \cdot F_2 \cdot  \ldots \cdot F_k$.

This representation is unique (except for permutations in the factors) and is called the prime factorization of $P$.
Each factor $F_i$ is called a prime factor of $P$.

---

*NOTE*

The above is an analog to the [[id:6402bede-282d-4b6a-a4f9-31092fc00739][Fundamental Theorem of Arithmetic]] but applied to the ring of univariate polynomials $R[x]$.

---

** Irreducible polynomial
=Definition=

An *Irreducible polynomial* ss defined as a polynomial that cannot be factored into the product of two non-constant polynomials using Euclidean Division.

** Roots of the polynomial

=Definition=

Points where a polynomial evaluates to zero are called roots of the polynomial.

The roots of a polynomial are of special interest with respect to its prime factorization, since it can be shown that, for any given root $x_0$ of $P$, the polynomial $F(x) = (x - x_0)$ is a prime factor of $P$.
** IN-PROGRESS Schwartz-Zippel Lemma
:PROPERTIES:
:ID:       e52ff81b-e1a8-4153-b8e7-710ab93f82d9
:END:

=Lemma=

Let $f(x_{1},x_{2}, \ldots, x_{n})$ be a non-zero polynomial over some field $F$, and suppose the total degree of $f$ is $d$.
Let $S \subseteq F$ be a finite subset of a field, and suppose we choose values $a_{1},a_{2},\ldots, a_{n} \in S$ *uniformly at random*.

Then:

$Pr\{f(a_{1},a_{2}, \ldots, a_{n}) =0 \} \leq \frac{d}{|S|}$

=Implications=

- You can test any multivariate polynomial (arbitrarily complicated) and probabilistically determine if it's 0 everywhere (a 0-polynomial).
  - Pick a random input, evaluate the polynomial. If it's non-zero, you are certain the polynomial is not a constant zero polynomial.
  - If it's 0, it might be by chance, but thanks to the S-Z lemma you can control the probability by testing with enough random inputs (you can make it arbitrarily small).
- You can test if two polynomials are equal
  - Given a pair of polynomials $p_{1}(x)$ and $p_{2}(x)$ you can check if $p_{1}(x) \equiv p_2(x)$ by checking if $P(x)=p_{1}(x)-p_{2}(x) \equiv 0$. If so, you can be certain, up to the known probability, that they are equal.

---

*NOTE: Error Probability*

When we evaluate at $k$ random points from $S$ the probability of missing a non-zero in all these $k$ tests is:

$(\frac{d}{|S|})^{k}$.

So by choosing $|S| >> d$ and repeating a few times we can get a high confidence.

---

*** Example
Consider the polynomial:

$P(x_{1},x_{2})=(x-1)(x-2)$

Let $s = {0,1,2,3}$, so $|S|=4$.
Then the probabiity that $f(x_{1},x_{2})=0$ when $x_{1},x_{2} \in S$ are chosen at random is:

$Pr\{f(x_{1},x_{2})=0\} \leq \frac{2}{4}=0.5$

If you choose a bigger set (e.g. |S|=100) the probability of it being zero "by chance" drops to $2/100=0.02$.

*** Example: Testing for polynomial equality (or intersection) using S-Z Lemma

Consider two polynomials:

$p_{1}(x,y)=x^2+2xy+y^2$
$p_{2}(x,y)=(x+y)^2$

We want to test if $p_{1} \equiv p_{2}$.
We compute:

$P(x,y)=p_{1}(x,y)-p_{2}(x,y)$

By the [[id:6f36e8fe-0917-4126-9542-28d9e102cc37][Fundamental Theorem of Algebra]] $P(x)$ has $d=max(d_{1},d_{2})$ roots, where:
- $d_{1}$ is the degree of $p_{1}(x)$ and
- $d_{2}$ is the degree of $p_{2}(x)$.

This is the same as saying that $p_{1}$ and $p_{2}$ have $d$ points of intersection.

We evaluate P(x,y) at randomly chosen point $(x,y) \in S^2$, where $S=\{1,2,3,4,5\}$.
We draw $(x=3,y=4)$:

$p_{1}(3,4)-p_{2}(3,4)=25-25=0$

We draw a second point: $(x=2,y=2)$:

$p_{1}(3,4)-p_{2}(3,4)=16-16=0$

- with a probaility $(\frac{d}{|S|})^{k}=(\frac{2}{5})^{2}=0.16$ $p_{1}(x) \neq p_{2}(x)$ and we randomly found one of the $d$ points where they intersect.
- with a probability of $1-(\frac{d}{|S|})^{k}=(\frac{2}{5})^{2}=1-0.16=0.84$ we can say these two polynomials are equal.
- we can keep repeating the test, increasing our confidence that these two polynomials are equal

*** TODO Example: Testing polynomials in finite fields
*** TODO Example: Using the Schwartz-Zippel Lemma to test if two vectors are equal
* Homomorphism
:PROPERTIES:
:ID:       f46d0e1d-b074-47cc-a6a5-95bd89a16be2
:END:
Homomorphism is a structure-preserving map between two algebraic structures of the same type (such as two groups, two rings, two monoids etc).

=Definition (Group Homomorphism)=

Let $G$ and $H$ be [[id:4c9d3fac-53fc-40a3-9dfd-1014ffb633a2][Groups]]. Function $\phi: G \rightarrow H$ is a *group homomorphism* if for all $a,b \in G$

$\phi(a \cdot b)=\phi(a) \odot \phi(b)$

where:
- $a \cdot b$ is the group operation in the domain group $G$ (a [[id:d17ab6af-78f3-4b78-a3ec-0f1ba7c1dbf0][binary operator]]).
- \phi(a) \odot \phi(b) is the group operation in the codomain group $H$ (also a [[id:d17ab6af-78f3-4b78-a3ec-0f1ba7c1dbf0][binary operator]]).

This means that $\phi$ respects the group operation.

=Properties=

- $\phi$ must work with every possible pair of elements from $H$ (including pairs of the same element), but it does not need to "access" all the elements of $G$.
- For example, a trivial homomorphism that maps every element in $H$ to the identity element in $G$ is a valid homomorphism
- If we choose two arbitrary sets with a binary operator, a homomorphism may not necessarily exist.
- There may be a homomorphism from $H$ to $G$, but not necessarily from $G$ to $H$
- If $\phi: H \rightarror G$ is a homomorphism and it's inverse $\phi^{-1}: G \rightarrow H$ is also a homomorphism then $\phi$ is an [[id:4a93116b-94b3-4774-afdd-e7c486dd56fb][isomorphism]].
  - $\phi$ then neccessarily turns out to be bijective (one-to-one and onto).
- If there is a homomorphism from $H$ to $G$ and from $G$ to $H$ and $\phi$ is the map from $H$ to $G$ it's inverse $\phi^{-1}$ may not necessarily be a valid map for the homomorphism from to $G$ to $H$.

=Example=

Let $G=(\mathbb{Z},+)$, (the group of integers under addition) and $H=(\mathbb{Z}_6,+)$ (the group of integers mod 6 under addition).
Let $\phi: \mathbb{Z} \rightarrow \mathbb{Z}_{6}$ be s.t:

$\phi(n) = n \quad \text{mod } 6$.

The for any $a,b \in \mathbb{Z}$:

$\phi(a+b)=a+b \quad \text{mod } 6 = (a \quad \text{mod } 6) + (b \quad \text{mod } 6) = \phi(a)+\phi(b)$.

** Example: (\mathbb{Z},+) to (\mathbb{Z}_{6},+ )
#+BEGIN_SRC sage :session . :exports both
Z=IntegerRing()
Z6=Integers(6)

phi = lambda n: Z6(n)

a = 7
b = 10

lhs = phi(a+b)
rhs = phi(a) + phi(b)

print(f"phi({a}+{b})={lhs} == phi({a})+phi({b})={rhs}: {lhs == rhs}")
#+END_SRC

#+RESULTS:
: phi(7+10)=5 == phi(7)+phi(10)=5: True
** Example: [[id:77d52c07-a41e-42c5-8069-2be5eaf576b2][Elliptic Curve Scalar Multiplication]]

Let $E$ be an elliptic curve defined over a finite field $\mathbb{F}_p$ (with a prime characteristic $p$).
Let $r$ be the order of some subgroup of $E(\mathbb{F}_p)$, and $r \quad | \quad \#E(\mathbb{F}_p)$.
Let $P \in E(\mathbb{F}_p)$ be a point of order $r$.

[[id:77d52c07-a41e-42c5-8069-2be5eaf576b2][Elliptic Curve Scalar Multiplication]] is defined as:

Let $\phi: \mathbb{Z}_{r} \rightarrow <P> \subseteq E(\mathbb{F}_p), \quad \phi(n)=[n]P$

where:

- $[n]P=P + P + \ldots + P (\text{n times})$
- $\mathbb{Z}_r$ is the domain.
- The cyclic [[id:34778683-5d8a-4242-87c5-06fc72f31135][subgroup]] $<P>$ is the codomain.

For all $a,b\in \mathbb{Z}_r$:

$\phi(a+b)=[a+b]P=[a]P +[b]P = \phi(a) + \phi(b)$

#+BEGIN_SRC sage :session . :exports both
p=97
F = GF(p)
E = EllipticCurve(F, [2,3])

P = E.random_point()
while not P.order().is_prime():
  P = E.random_point()

r = P.order()

Zr=Integers(r)

phi = lambda n,P: n*P

a = Zr(1)
b = Zr(2)

lhs = phi((a+b),P)
rhs = phi(a,P) + phi(b,P)

print(f"phi({a}+{b})={lhs} == phi({a})+phi({b})={rhs}: {lhs == rhs}")

# Check bijectivity
image_set = set(phi(n,P) for n in Zr)
print(f"Size of image set: {len(image_set)} (should be {r})")
print("Is bijective?", len(image_set) == r)
#+END_SRC

#+RESULTS:
: phi(1+0)=(30 : 0 : 1) == phi(1)+phi(0)=(30 : 0 : 1): True
: Size of image set: 2 (should be 2)
: Is bijective? True
