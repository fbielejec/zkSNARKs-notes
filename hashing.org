* TODO Hashing to groups
** TODO Pedersen hashes
* TODO Hashing into modular arithmetic
* TODO Hashing to elliptic curves
* IN-PROGRESS Sponge Construction
:PROPERTIES:
:ID:       58b8c8e6-638b-4235-bd03-71ceb4986c24
:END:

** IN-PROGRESS Notation
- Bitstrings

#+BEGIN_SRC sage :session . :exports both
# additive group of Z mod 2
Z2=Zmod(2)
[x for x in Z2]

Z2.unit_group() # multiplicative group mod 7
[x for x in Z2.unit_group()]
#+END_SRC

#+RESULTS:
: [0, 1]
: Trivial Abelian group
: [1]

** IN-PROGRESS Padding

#+BEGIN_SRC sage :session . :exports both
def keccak_padding(data, r):
    # Convert data to bits
    bit_data = ''.join(format(byte, '08b') for byte in data)

    # Append '1' and '0's until length is a multiple of r
    padded_data = bit_data + '1'  # Append a single '1'
    while (len(padded_data) + 1) % r != 0:  # Ensure divisible by r after padding
        padded_data += '0'  # Append '0's

    # Append the last '1' to finalize the padding
    padded_data += '1'  # Here the final '1' indicates end of padding
    return padded_data

r = 64  # Rate part of Keccak in bits
data = bytes("HELLO", 'utf-8') # 40 bits

padded_data = keccak_padding(data, r)

print(f"Padded Data (in bits): {padded_data}")
print(f"Padded Data Length: {len(padded_data)} bits")
#+END_SRC

#+RESULTS:
: Padded Data (in bits): 0100100001000101010011000100110001001111100000000000000000000001
: Padded Data Length: 64 bits
* IN-PROGRESS Keccak256
:PROPERTIES:
:ID:       f4589c6e-721b-4eed-9126-b5429ab5c3eb
:END:
** Leaf hashing
#+BEGIN_SRC sage :session . :exports both
import sha3

# Create a SHA3-256 hash object
keccak = sha3.keccak_256()

# Data to hash
data = b"bar"

# Update the hash object with the data
keccak.update(data)

# Get the hexadecimal digest
hash_value = keccak.hexdigest()
print(f"Keccak Hash: {hash_value}")
#+END_SRC

#+RESULTS:
: Keccak Hash: 435cd288e3694b535549c3af56ad805c149f92961bf84a1c647f7d86fc2431b4

* IN-PROGRESS Merkle trees
:PROPERTIES:
:ID:       1957dc5a-6259-4b4a-b1d9-0a04eb48466a
:END:
** Parent hashing
#+BEGIN_SRC sage :session . :exports both
import sha3

def leaf_hash(data):
  keccak = sha3.keccak_256()
  keccak.update(data)
  return keccak.digest()

left_data = b"foo"
left_hash = leaf_hash(left_data)

right_data = b"bar"
right_hash = leaf_hash(right_data)

parent_data = left_hash + right_hash
parent_hash = leaf_hash(parent_data)

print(f"Keccak Hash: {parent_hash.hex()}")
#+END_SRC

#+RESULTS:
: Keccak Hash: 744766909640c85c19ca00139e7af3c5d9cb8dbfbc6635812eedc4e3cbf4fce6
