* IN-PROGRESS Combinations
:PROPERTIES:
:ID:       b378a169-4180-440d-bfe0-0f4d76082fe1
:END:
- Combinations are unordered selections where the order of items does not matter.
** IN-PROGRESS Combinations with repetitions
:PROPERTIES:
:ID:       0652c4e2-a6ea-431b-a6bf-506f038e2c30
:END:
- [ ] https://www.statlect.com/mathematical-tools/combinations#:~:text=Number%20of%20combinations%20with%20repetition
- The number of possible combinations of $k$ out of $n$ with repetition is:

$C^{'}_{n,k}= \begin{pmatrix}n+k-1 \\ k\end{pmatrix} = \frac{(n+k-1)!}{(n-1)!k!}$

=Example=

Ordering three scoops of ice cream ($k=3$), choosing among four flavours: chocolate, pistachio, strawberry and vanilla ($n=4$).
It is possible to order two scoops of the same flavour. How many possible choices are there?

#+BEGIN_SRC rustic
    let n = 4;
    let flavours = vec!["chocolate", "pistachio", "strawberry", "vanilla"];

    let mut c = 0;

    for i in 0..n {
        for j in i..n {
            for k in j..n {
                println!("{},{},{}", flavours[i], flavours[j], flavours[k]);
                c+=1
            }
        }
    }

println!("total: {c}");
#+END_SRC

#+RESULTS:
#+begin_example
chocolate,chocolate,chocolate
chocolate,chocolate,pistachio
chocolate,chocolate,strawberry
chocolate,chocolate,vanilla
chocolate,pistachio,pistachio
chocolate,pistachio,strawberry
chocolate,pistachio,vanilla
chocolate,strawberry,strawberry
chocolate,strawberry,vanilla
chocolate,vanilla,vanilla
pistachio,pistachio,pistachio
pistachio,pistachio,strawberry
pistachio,pistachio,vanilla
pistachio,strawberry,strawberry
pistachio,strawberry,vanilla
pistachio,vanilla,vanilla
strawberry,strawberry,strawberry
strawberry,strawberry,vanilla
strawberry,vanilla,vanilla
vanilla,vanilla,vanilla
total: 20
#+end_example

For n=4, k=3:

$C^{'}_{n,k} = \frac{(4+3-1)!}{(4-1)!3!}=20$
** TODO Combinations without repetitions
* IN-PROGRESS Permutations
:PROPERTIES:
:ID:       9da0961e-0868-45e1-a4a8-da79e0d8d87a
:END:
- Permutations are ordered arrangements where the sequence of items matters
** IN-PROGRESS Permutations with repetitions
:PROPERTIES:
:ID:       a55507c5-7035-4b0d-99f1-c9cc94217e10
:END:
- The number of possible arrangements $k$ out of $n$, when items can repeat:

$P_{n,k}=n^{k}$

=Example=

The number of the possible 3 letter strings that can be built from the letters "a", "b", "c" and "d" is:
$P_{n,k}=P_{4,3}==4^3=64$
All the possible permutations are:

#+BEGIN_SRC rustic
let letters = ['a', 'b', 'c', 'd'];

let n = letters.len();

let mut total = 0;
for i in 0..n {
    for j in 0..n {
        for k in 0..n {
            println!("{}{}{}", letters[i], letters[j], letters[k]);
            total += 1;
        }
    }
}
println!("total: {total}");
#+END_SRC

#+RESULTS:
#+begin_example
aaa
aab
aac
aad
aba
abb
abc
abd
aca
acb
acc
acd
ada
adb
adc
add
baa
bab
bac
bad
bba
bbb
bbc
bbd
bca
bcb
bcc
bcd
bda
bdb
bdc
bdd
caa
cab
cac
cad
cba
cbb
cbc
cbd
cca
ccb
ccc
ccd
cda
cdb
cdc
cdd
daa
dab
dac
dad
dba
dbb
dbc
dbd
dca
dcb
dcc
dcd
dda
ddb
ddc
ddd
total: 64
#+end_example

*** Example: All possible 2 letter words
:PROPERTIES:
:ID:       179ea8a5-f539-4055-8819-e998ca3138e5
:END:

For simplicity let's assume k=2 long strings and n=3 letters: "a", "b" and "c".
The exhaustive search through all the permutattions can be represented as a n-ary tree, with the root being the empty string, each child having 3 children and depth of the tree being 2:

              ""
            / |  \
           /  |   \
          /   |    \
         /    |     \
        /     |      \
       /      |       \
      /       |        \
     /        |         \
    /         |          \
   a          b           c
 / | \     /  | \       / | \
a  b  c    a  b  c     a  b  c
** IN-PROGRESS Permutations without repetitions
:PROPERTIES:
:ID:       f9cc2064-0225-47e7-ade0-70ad721622f7
:END:
- Arranging distinct objects where order matters and each object can be used only once-
- If $n$ total objects have $k_1$ of one kind, $k_2$ of another etc, the number of permutations is:
$\frac{n!}{k_{1}!\cdot k_{2}! \ldots}$

=Example=

There are 3!=6 permutations of distinct integers 1,2,3
All of the permutations are:

#+BEGIN_SRC rustic
let a = [1,2,3];
let n = a.len();

for i in 0..n {
    for j in 0..n {
        for k in 0..n {
            if i != j && j != k && i != k {
                println!("{},{},{}", a[i], a[j], a[k]);
            }
        }
    }
}
#+END_SRC

#+RESULTS:
: 1,2,3
: 1,3,2
: 2,1,3
: 2,3,1
: 3,1,2
: 3,2,1
